name: Build with Buildah

on:
  # schedule:
  #   - cron: '50 6 * * *'  # Runs at 12:00 AM UTC every day (7 PM EST the previous day)
  #   # - cron: '0 0 * * 1-5'  # Runs Monâ€“Fri at 12:00 AM UTC (7 PM EST the previous day)
  # workflow_run:
  #   workflows: ["Cypress Tests Workflow Run"]
  #   types:
  #     - completed

  workflow_dispatch:
    inputs:
      runner:
        description: 'Choose the Runner'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - runner-scale-set-kubernetes
          - runner-scale-set-dind
          - ubuntu-latest

env:
  IMAGE_NAME: nodejs-image-demo
  # IMAGE_TAGS: v1 ${{ github.sha }}
  IMAGE_REGISTRY: docker.io
  IMAGE_NAMESPACE: ashwinkmgowda

jobs:

  build:
    name: Build and push image
    runs-on:
      - ${{ inputs.runner }}
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set Build Variables
      id: set-vars
      run: |
        # echo "image_tag=$(echo $GITHUB_SHA  | cut -c1-6)" >> $GITHUB_OUTPUT
        echo "image_tag_sha=$(echo $GITHUB_SHA)" >> $GITHUB_OUTPUT

    - name: print set vars
      run: |
        echo "Image Tag SHA: ${{ steps.set-vars.outputs.image_tag_sha }}"
    - name: Determine base branch and sanitize
      id: determine-branch
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
        else
          BASE_BRANCH="${GITHUB_REF#refs/heads/}"
        fi

        # Sanitize branch name for Docker tag (replace slashes with dashes)
        SANITIZED_BRANCH=$(echo "$BASE_BRANCH" | sed 's#/#-#g')
        echo "image_tag_branch=${SANITIZED_BRANCH}-${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: print branch vars
      run: |
        echo "Image Tag Branch: ${{ steps.determine-branch.outputs.image_tag_branch }}"

    - name: Set Image Tags
      run: |
        echo "IMAGE_TAGS=latest,${{ steps.set-vars.outputs.image_tag_sha }},${{ steps.determine-branch.outputs.image_tag_branch }}" >> $GITHUB_ENV
    - name: Build Image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_NAME }}
        tags: ${{ env.IMAGE_TAGS }}
        containerfiles: |
          ./Dockerfile

    - name: Push To dockerhub
      id: push-to-ghcr
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Print image url
      run: echo "Image pushed to ${{ steps.push-to-ghcr.outputs.registry-paths }}"